# Generic makefile to build Qubes component package
#
# Variables used as "parameters":
#  DIST
#  SRC_DIR
#  COMPONENT
#  PACKAGE_SET (currently "dom0" or "vm")

### Global variables

.EXPORT_ALL_VARIABLES:
SHELL = /bin/bash

# should be defined by main Makefile, but set manually if called from outside
# of it
SRC_DIR ?= qubes-src

# this needs to be the first prerequisite, before any plugin-defined
update-repo-from-snapshot: update-repo-date-check

# Load "builder.config" from every plugin

# force dom0's builder plugin for handling template packages
ifeq ($(COMPONENT),linux-template-builder)
TEMPLATE_NAME := $(shell MAKEFLAGS= $(MAKE) -s -C $(SRC_DIR)/linux-template-builder DIST=$(DIST) template-name)
DIST_ORIG := $(DIST)
# reverse alias lookup
DIST_ORIG_ALIAS := $(firstword $(subst :, ,\
			$(filter %:$(DIST_ORIG),\
				$(TEMPLATE_ALIAS) $(DIST_ORIG):$(DIST_ORIG))))
override DIST := $(DIST_DOM0)
endif

LOADING_PLUGINS = 1
BUILDER_MAKEFILE := 
BUILDER_PLUGINS_COMBINED = $(BUILDER_PLUGINS) $(BUILDER_PLUGINS_$(DIST))
-include $(BUILDER_PLUGINS_COMBINED:%=$(SRC_DIR)/%/Makefile.builder)
ifeq ($(BUILDER_MAKEFILE),)
$(error Building packages for $(DIST) not supported by any of configured plugins)
endif
LOADING_PLUGINS :=

THIS_MAKEFILE = Makefile.generic

ORIG_SRC = $(SRC_DIR)/$(COMPONENT)

# repository for ready packages; directory content is distro-specific
BUILDER_REPO_DIR = $(PWD)/qubes-packages-mirror-repo/$(PACKAGE_SET)-$(DIST)

OUTPUT_DIR = pkgs/$(PACKAGE_SET)-$(DIST)

# build environment
CHROOT_DIR = $(PWD)/chroot-$(PACKAGE_SET)-$(DIST)
CACHEDIR = $(PWD)/cache/$(DIST)

# Logfile
BUILD_LOG="build-logs/$(COMPONENT)-$(PACKAGE_SET)-$(DIST).log"

# environment variables for build process (inside of chroot)

CHROOT_ENV = BACKEND_VMM=$(BACKEND_VMM) $(ENV_COMPONENT)

# default value
ifndef MIN_AGE
MIN_AGE = 7
endif

OUTPUT ?= $(ORIG_SRC)/$(OUTPUT_DIR)/build_timestamp
SOURCE ?= $(ORIG_SRC)/version

### Load component-specific settings

# Component specific settins. Generic variables:
#  SOURCE_PREP - make target to run at "prep" stage
#  SOURCE_COPY_IN - make target to run after "copy-in" stage
#  SOURCE_COPY_OUT - make target to run after "copy-out" stage
# Above are mainly to extend Makefile with some component-specific actions
# (like handling additional sources)
#
#
# Check Makefile.DISTRIBUTION for distribution-specific supported variables
include $(ORIG_SRC)/Makefile.builder

### Load distro-specific settings

# This file should define:
# 1. variables:
#   PACKAGE_LIST - list of packages to build. Targets 'build-dep', 'package' and 'copy-out'
#     will be run for each word on the list, with PACKAGE set to current word
#   DIST_BUILD_DIR - basedir for sources inside of chroot - relative to
#     CHROOT_DIR (qubes-src will be created in this directory)
# targets:
#   dist-prepare-chroot - initial preparation of chroot environment
#   dist-prep - some preparation of sources (if needed)
#   dist-build-dep - install build dependencies (should operate on chroot directory)
#   dist-package - compile package (should operate on chroot directory)
#   dist-copy-out - copy compiled package out of chroot env; this target should
#     move packages to ORIG_SRC (distro-specific subdir) and hardlink them to
#     BUILDER_REPO_DIR
#
#   dist-build-dep, dist-package and dist-copy-out targets are run in separate
#   process with stdout+stderr redirected to log file. If you want to print
#   some message, use 3-rd file descriptor
#
# This file can specify additional targets (like update-repo-*, sign)
include $(BUILDER_MAKEFILE)


DIST_SRC_ROOT=$(DIST_BUILD_DIR)/qubes-src
DIST_SRC=$(DIST_SRC_ROOT)/$(COMPONENT)

ifneq (,$(GIT_TARBALL_NAME))
  ifneq (1,$(NO_ARCHIVE))
TARBALL_COPY_IN = make-git-tarball
  endif
endif

.PHONY: copy-in
copy-in: generic-copy-in $(TARBALL_COPY_IN) $(SOURCE_COPY_IN)


.PHONY: make-git-tarball
make-git-tarball:
	git -C $(CHROOT_DIR)$(DIST_SRC) clean -f -d -X
	$(BUILDER_DIR)/scripts/create-archive $(CHROOT_DIR)$(DIST_SRC) $(GIT_TARBALL_NAME)

.PHONY: generic-copy-in
generic-copy-in:
	@mkdir -p $(CHROOT_DIR)/$(DIST_SRC_ROOT)
	@cp $(THIS_MAKEFILE) $(CHROOT_DIR)/$(DIST_BUILD_DIR)/
	@cp $(BUILDER_MAKEFILE) $(CHROOT_DIR)/$(DIST_BUILD_DIR)/
	@rm -rf $(CHROOT_DIR)/$(DIST_SRC)
	@cp -alt $(CHROOT_DIR)/$(DIST_SRC_ROOT)/ $(ORIG_SRC)
	@rm -rf $(CHROOT_DIR)/$(DIST_SRC)/pkgs

.PHONY: windows-image-extract
windows-image-extract:
ifneq (,$(WINDOWS_IMAGE_EXTRACT_EXTRA))
	@rm -rf $(WINDOWS_IMAGE_EXTRACT_EXTRA:%=$(ORIG_SRC)/%)
	@cp -r $(WINDOWS_IMAGE_EXTRACT_EXTRA:%=$(WINDOWS_IMAGE_DIR)/$(ORIG_SRC)/%) $(ORIG_SRC)/
endif

.PHONY: prep
prep: generic-prep dist-prep $(SOURCE_PREP)

.PHONY: generic-prep
generic-prep:
	@if [ -e "$(BUILD_LOG)" ]; then\
	   mv -f "$(BUILD_LOG)" "$(BUILD_LOG).old";\
	fi

.PHONY: generic-prepare-chroot
generic-prepare-chroot:
	@if [ "`id -u`" = 0 ]; then \
		echo "*******************************************************************************"; \
		echo "***                               ERROR                                      ***"; \
		echo "*** Start the build as normal user, it will use sudo (only) where necessary! ***"; \
		echo "***                                                                          ***"; \
		echo "*******************************************************************************"; \
		exit 1; \
	fi
	@mkdir -p "$(CACHEDIR)"

.PHONY: prepare-chroot
prepare-chroot: generic-prepare-chroot dist-prepare-chroot

.PHONY: all
ifneq (,$(PACKAGE_LIST))
all: prepare-chroot prep copy-in packages
else ifeq (2,$(VERBOSE))
# Do nothing if no packages to compile
all:
	$(info -> Nothing to be done in $(COMPONENT) for $(DIST) $(PACKAGE_SET))
	@true
else
# Do nothing if no packages to compile
all:
	@true
endif

.PHONY: packages
packages: $(OUTPUT)

# Make is going to call the target defined by $(OUTPUT)
# if $(SOURCE) is newer than $(OUTPUT). By default, $(OUTPUT)
# is a build timestamp whereas $(SOURCE) is COMPONENT version file.
# The build will occur once then will be skipped. In consequence,
# any builder plugins can rule when is done the build/rebuild of
# a component.
ifeq (,$(SOURCE))
.PHONY: $(OUTPUT)
endif
$(OUTPUT): $(SOURCE)
	@for package in $(PACKAGE_LIST); do\
		set -o pipefail;\
		echo "-> Building $(COMPONENT) ($$package) for $(DIST) $(PACKAGE_SET) (logfile: $(BUILD_LOG))";\
		if [ $(VERBOSE) -eq 0 ]; then\
			$(MAKE) -f $(THIS_MAKEFILE) PACKAGE=$$package package 3>&1 >>"$(BUILD_LOG)" 2>&1;\
			BUILD_RETCODE=$$?;\
		elif [ $(VERBOSE) -eq 1 ]; then\
			$(MAKE) -s -f $(THIS_MAKEFILE) PACKAGE=$$package package 3>&2 2>&1 | tee -a $(BUILD_LOG);\
			BUILD_RETCODE=$$?;\
		else\
			$(MAKE) -f $(THIS_MAKEFILE) PACKAGE=$$package package 3>&2 2>&1 | tee -a $(BUILD_LOG);\
			BUILD_RETCODE=$$?;\
		fi;\
		if [ $$BUILD_RETCODE -gt 0 ]; then\
			echo "--> build failed!";\
			[ $(VERBOSE) -eq 0 ] && tail -n 50 "$(BUILD_LOG)";\
			exit 1;\
		fi;\
	done;\
	touch $(OUTPUT)

.PHONY: package
package: dist-build-dep dist-package dist-copy-out $(SOURCE_COPY_OUT)

# Returns variable value
# Example usage: GET_VAR=DISTS_VM make get-var
.PHONY: get-var
get-var::
	@GET_VAR=$${!GET_VAR}; \
	echo "$${GET_VAR}"

.PHONY: update-repo-date-check
update-repo-date-check:
	if ! [ -r $(SNAPSHOT_FILE) ]; then \
		echo "`tput bold`*** Packages weren't uploaded to $(SNAPSHOT_REPO)! ***`tput sgr0`"; \
		exit 1; \
	fi
	touch -t `date -d "$(MIN_AGE) days ago" +%Y%m%d%H%M` /tmp/age-compare-file
	if ! [ $(SNAPSHOT_FILE) -ot /tmp/age-compare-file ]; then \
		echo "`tput bold`*** Packages weren't in $(SNAPSHOT_REPO) for at least $(MIN_AGE) days! ***`tput sgr0`"; \
		exit 1; \
	fi
	rm -f /tmp/age-compare-file
